{
    "collab_server" : "",
    "contents" : "\n# Packages\n\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(tidyverse)\n\n# Functions\nsource(\"graphics.R\")\n\n\n# Data\n\ndata1 <- readRDS(\"data/data1_depths_geno_prob.rds\")\ndata2 <- readRDS(\"data/data2_maps.rds\")\ndata3 <- readRDS(\"data/data3_coverage.rds\")\ndata4 <- readRDS(\"data/data4_filters.rds\")\ndata5 <- readRDS(\"data/data5_SNPcall_efficiency.rds\")\n\nseeds_choice <- as.list(unique(data1$seed))\nnames(seeds_choice) <- as.character(unique(data1$seed))\nErrorProb_choice <- as.list(levels(data1$ErrorProb))\nnames(ErrorProb_choice) <- as.character(unique(data1$ErrorProb))\nSNPcall_choice <- as.list(levels(data1$SNPcall))\nnames(SNPcall_choice) <- as.character(unique(data1$SNPcall))\nCountsFrom_choice <- as.list(levels(data1$CountsFrom))\nnames(CountsFrom_choice) <- as.character(unique(data1$CountsFrom))\n\n########\n#  UI  #\n########\n\n## Header\nheader <- dashboardHeader(\n  title = \"Error workflow results\",\n  titleWidth = 250)\n\nsidebar <- dashboardSidebar(\n  sidebarMenu(\n    menuItem(\"About\", tabName = \"about\", icon = icon(\"lightbulb\")),\n    menuItem(\"Depth and genotyping\", icon = icon(\"chart-line\"), tabName = \"graph1\"),\n    menuItem(\"Map size each family\", icon = icon(\"chart-bar\"), tabName = \"graph2\"),\n    menuItem(\"Overview map size\", icon = icon(\"chart-bar\"), tabName = \"graph3\"),\n    menuItem(\"Coverage\", icon = icon(\"chart-bar\"), tabName = \"graph4\"),\n    menuItem(\"SNP calling efficiency\", icon = icon(\"chart-bar\"), tabName = \"graph5\"),\n    menuItem(\"Error probabilities\", icon = icon(\"chart-bar\"), tabName = \"graph6\"),\n    \n    menuItem(\"Personal website\", icon = icon(\"venus\"), href= \"http://cristianetaniguti.github.io/\"),\n    menuItem(\"Laboratory website\", icon = icon(\"users\"), href=\"http://augustogarcia.me/statgen-esalq/\")\n  )\n)\n\nbody <- dashboardBody(\n  tabItems(\n    tabItem(tabName = \"about\",\n            h2(\"Widgets tab content\")\n    ),\n    tabItem(tabName = \"graph1\",\n            fluidRow(\n              column(width = 6,\n                     box(\n                       title = \"Graph1\", width = NULL, status = \"primary\",\n                       plotOutput(\"graph1_out\")\n                     ),\n                     box(\n                       title = \"Widgets\", width = NULL, solidHeader = TRUE, status = \"primary\",\n                       fluidPage(\n                         radioButtons(\"ErrorProb1\", label = p(\"Genotype method\"),\n                                      choices = ErrorProb_choice,\n                                      selected = \"polyrad\"),\n                         \n                         \n                         hr()\n                       ),\n                       \n                       #helpText(\"Select the SNP calling method\"),\n                       fluidPage(\n                         radioButtons(\"SNPcall1\", label = p(\"SNP calling method\"),\n                                      choices = SNPcall_choice,\n                                      selected = \"freebayes\"),\n                         \n                         \n                         hr()\n                       ),\n                       \n                       #helpText(\"Select the family seed\"),\n                       fluidPage(\n                         \n                         selectInput(\"seed1\", label = p(\"Seed\"),\n                                     choices = seeds_choice,\n                                     selected = seeds_choice[[1]]),\n                         \n                         hr()\n                       ),\n                       \n                       #helpText(\"Read counts from:\"),\n                       fluidPage(\n                         \n                         radioButtons(\"CountsFrom1\", label = p(\"Counts from\"),\n                                      choices = CountsFrom_choice,\n                                      selected = \"vcf\"),\n                         \n                         hr()\n                         # ),\n                       )\n                     )\n              ),\n              \n              column(width = 6,\n                     box(\n                       title = \"Graph2\", status = \"warning\", width = NULL,\n                       plotOutput(\"graph2_out\")\n                     ),\n                     box(\n                       title = \"Widgets\", width = NULL, solidHeader = TRUE, status = \"warning\",\n                             fluidPage(\n                               radioButtons(\"ErrorProb2\", label = p(\"Genotype method\"),\n                                                  choices = ErrorProb_choice,\n                                                  selected = \"polyrad\"),\n\n\n                               hr()\n                             ),\n\n                             #helpText(\"Select the SNP calling method\"),\n                             fluidPage(\n                               radioButtons(\"SNPcall2\", label = p(\"SNP calling method\"),\n                                                  choices = SNPcall_choice,\n                                                  selected = \"freebayes\"),\n\n\n                               hr()\n                             ),\n\n                             #helpText(\"Select the family seed\"),\n                             fluidPage(\n\n                               selectInput(\"seed2\", label = p(\"Seed\"),\n                                           choices = seeds_choice,\n                                           selected = seeds_choice[[1]]),\n\n                               hr()\n                             ),\n\n                             #helpText(\"Read counts from:\"),\n                             fluidPage(\n\n                               radioButtons(\"CountsFrom2\", label = p(\"Counts from\"),\n                                            choices = CountsFrom_choice,\n                                            selected = \"vcf\"),\n\n                               hr()\n                             # ),\n                            )\n                     )\n              )\n            )\n    ),\n    \n\n    \n    tabItem(tabName = \"graph2\",\n            h2(\"Dashboard tab content\")\n    ),\n    \n    tabItem(tabName = \"graph3\",\n            h2(\"Widgets tab content\")\n    ),\n    tabItem(tabName = \"graph4\",\n            h2(\"Dashboard tab content\")\n    ),\n    \n    tabItem(tabName = \"graph5\",\n            h2(\"Widgets tab content\")\n    ),\n    \n    tabItem(tabName = \"graph5\",\n            h2(\"Widgets tab content\")\n    )\n  )\n)\n\n\nui <- dashboardPage(header, sidebar, body)\n\n\n\n\n#   sidebarLayout(\n#     sidebarPanel(\n#       helpText(\"This app shows the results of reads simulations\"),\n#       \n#       img(src = \"LogoFundoTransp.jpg\", height = 70, width = 200, align=\"center\"),\n#       br(),\n#       br(),\n#       a(\"Lab homepage\", href = \"http://augustogarcia.me/statgen-esalq/\"),\n#       br(),\n#       a(\"Cristiane homepage\", href = \"http://cristianetaniguti.github.io/\"),\n#       hr(),\n#       \n#       helpText(\"Select the genotyping method\"),\n#       fluidPage(\n#         radioButtons(\"ErrorProb\", label = h3(\"Genotype method\"), \n#                            choices = list(\"Freebayes\" = \"GQ\", \"GATK\" = \"GQ\", \n#                                           \"polyrad\" = \"polyrad\", \"updog\" = \"updog\",\n#                                           \"supermassa\" = \"supermassa\"),\n#                            selected = \"polyrad\"),\n#         \n#         \n#         hr()\n#       ),\n#       \n#       # helpText(\"An overview of the SNP calling efficiency\"),\n#       # fluidPage(\n#       #   checkboxGroupInput(\"SNPcall_ef\", label = h3(\"SNP calling efficiency\"), \n#       #                      choices = list(\"simulated SNPs\" = 1, \"identified SNP\" = 2, \n#       #                                     \"SNPs ok\" = 2, \"fake SNPs\" = 3,\n#       #                                     \"ref allele ok\" = 4, \"alt allele ok\"= 5),\n#       #                      selected = 1),\n#       #   \n#       #   \n#       #   hr()\n#       # ),\n#       # \n#       helpText(\"Select the SNP calling method\"),\n#       fluidPage(\n#         radioButtons(\"SNPcall\", label = h3(\"SNP calling method\"), \n#                            choices = list(\"Freebayes\" = \"freebayes\", \"GATK\" = \"gatk\"),\n#                            selected = \"freebayes\"),\n#         \n#         \n#         hr()\n#       ),\n#       \n#       helpText(\"Select the family seed\"),\n#       fluidPage(\n# \n#         selectInput(\"seed\", label = h3(\"Seed\"), \n#                     choices = seeds_choice, \n#                     selected = seeds_choice[[1]]),\n#         \n#         hr()\n#       ),\n#       \n#       helpText(\"Read counts from:\"),\n#       fluidPage(\n# \n#         radioButtons(\"CountsFrom\", label = h3(\"Counts from\"),\n#                      choices = list(\"vcf\" = \"vcf\", \"bam\" = \"bam\"), \n#                      selected = \"vcf\"),\n#         \n#         hr()\n#       # ),\n#       \n#       # helpText(\"Choose the statistics to an overview of the recombination fractions\"),\n#       # fluidPage(\n#       #   \n#       #   radioButtons(\"stat\", label = h3(\"Overview\"),\n#       #                choices = list(\"median\" = 1, \"mean\" = 2,\n#       #                               \"variance\"= 3, \"Total size\" = 3), \n#       #                selected = 1),\n#       #   \n#       #   hr()\n#       )\n#     ),\n#     mainPanel(\n#       plotOutput(\"ErrorProb_out\")\n#     )\n#   )\n# )\n# \n# # Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n\n    output$graph1_out <- renderPlot({\n      data <- data1 %>% filter(ErrorProb == input$ErrorProb1) %>%\n              filter(SNPcall == input$SNPcall1) %>%\n              filter(seed == input$seed1) %>%\n              filter(CountsFrom == input$CountsFrom1)\n      errorProb_graph(data)\n    })\n\n    output$graph2_out <- renderPlot({\n      data <- data1 %>% filter(ErrorProb == input$ErrorProb2) %>%\n        filter(SNPcall == input$SNPcall2) %>%\n        filter(seed == input$seed2) %>%\n        filter(CountsFrom == input$CountsFrom2)\n      errorProb_graph(data)\n    })\n\n\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)",
    "created" : 1570642440524.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "335845565",
    "id" : "9429FA3",
    "lastKnownWriteTime" : 1570659784,
    "last_content_update" : 1570659784625,
    "path" : "~/github/errors_workflow_app/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}